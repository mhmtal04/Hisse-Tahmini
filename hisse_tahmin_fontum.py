import yfinance as yf
import numpy as np
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error
import streamlit as st
import datetime

st.set_page_config(page_title="Hisse Tahmin Botu", layout="centered")
st.title("ğŸ“Š HÄ°SSE TAHMÄ°N BOTU")

symbol = st.text_input("Hisse kodunu girin (Ã¶rnek: THYAO)", "")

# -------- Tarih aralÄ±ÄŸÄ± (varsayÄ±lan 30 gÃ¼n) --------
st.markdown("**VarsayÄ±lan: Son 30 gÃ¼n. DeÄŸiÅŸtirmek istersen tarih seÃ§im kutularÄ±nÄ± kullan.**")

use_custom_range = st.checkbox("Tarih aralÄ±ÄŸÄ±nÄ± kendim seÃ§mek istiyorum")
today = datetime.date.today()
default_start = today - datetime.timedelta(days=30)

if use_custom_range:
    col1, col2 = st.columns(2)
    with col1:
        start_date = st.date_input("BaÅŸlangÄ±Ã§", default_start)
    with col2:
        end_date = st.date_input("BitiÅŸ", today)
else:
    start_date, end_date = default_start, today

# -------- Yeni matematik seÃ§enekleri --------
st.sidebar.markdown("### ğŸ”§ GeliÅŸmiÅŸ Ayarlar")
use_vdd = st.sidebar.checkbox("Volatilite DÃ¶nÃ¼ÅŸÃ¼m Denklemi (VDD)", value=True)
use_ugk = st.sidebar.checkbox("UyarlamalÄ± GÃ¼ven KatsayÄ±sÄ± (UGK)", value=True)
ugk_conf = st.sidebar.slider("UGK gÃ¼ven katsayÄ±sÄ±", 0.0, 1.0, 0.5)

# -------- Veri ve model --------
if symbol:
    symbol = symbol.upper() + ".IS"
    st.write(f"**{symbol}** verisi indiriliyor ({start_date} â€“ {end_date})â€¦")
    data = yf.download(symbol, start=start_date, end=end_date)

    if data.empty:
        st.warning("Veri indirilemedi. LÃ¼tfen geÃ§erli kod ve tarih aralÄ±ÄŸÄ± girin.")
    elif (end_date - start_date).days < 7 or data.shape[0] < 20:
        st.warning("En az 7 iÅŸlem gÃ¼nÃ¼ (â‰ˆ20 satÄ±r) gerekli. Tarih aralÄ±ÄŸÄ±nÄ± geniÅŸletin.")
    else:
        # -------- GerÃ§ek zamanlÄ± fiyat --------
        try:
            current_price = float(yf.Ticker(symbol).info["currentPrice"])
            st.info(f"GerÃ§ek ZamanlÄ± Fiyat: {current_price:.2f} TL")
        except:
            current_price = data.Close.iloc[-1]
            st.warning("GerÃ§ek zamanlÄ± fiyat alÄ±namadÄ±, son kapanÄ±ÅŸ kullanÄ±lÄ±yor.")

        # -------- Teknik gÃ¶stergeler --------
        data["MA5"]  = data.Close.rolling(5).mean()
        data["MA10"] = data.Close.rolling(10).mean()
        data["RealTimePrice"] = current_price
        data["Target"] = data.Close.shift(-1)
        data.dropna(inplace=True)

        features = ["Close", "MA5", "MA10", "RealTimePrice"]
        X, y = data[features], data["Target"]

        X_train, X_test, y_train, y_test = train_test_split(
            X, y, test_size=0.2, shuffle=False
        )
        model = RandomForestRegressor(n_estimators=150, random_state=42)
        model.fit(X_train, y_train)

        mae = mean_absolute_error(y_test, model.predict(X_test))
        st.success(f"Model Ortalama Hata (MAE): Â±{mae:.2f} TL")

        # -------- Ham tahmin (bugÃ¼n & yarÄ±n) --------
        today_raw     = model.predict(X.iloc[[-1]])[0]
        tomorrow_raw  = model.predict(X.iloc[[-1]])[0]  # yarÄ±n iÃ§in de son satÄ±rÄ± baz al

        # -------- Piyasa verileri --------
        recent_diff   = float(data.Close.iloc[-1] - data.Close.iloc[-2])
        volatility    = float(data.Close.pct_change().rolling(5).std().iloc[-1] * 100)
        vol_factor    = min(max(volatility / 5, -1), 1)  # -1 â€¦ 1

        # -------- VDD dÃ¼zeltmesi --------
        if use_vdd:
            vdd_adj = recent_diff * np.log1p(volatility / 100)
            today_raw    += vdd_adj
            tomorrow_raw += vdd_adj

        # -------- UGK dÃ¼zeltmesi --------
        if use_ugk:
            ugk_adj = mae * (volatility / 100) * ugk_conf
            today_raw    += ugk_adj
            tomorrow_raw += ugk_adj

        # -------- Devre sÄ±nÄ±rÄ± (%10) --------
        up_lim, low_lim = current_price * 1.10, current_price * 0.90
        today_pred    = max(min(today_raw,    up_lim), low_lim)
        tomorrow_pred = max(min(tomorrow_raw, up_lim), low_lim)

        # -------- SonuÃ§ --------
        st.subheader("ğŸ“ˆ Tahmin SonuÃ§larÄ±")
        st.write(f"**BugÃ¼n (kapanÄ±ÅŸ) â†’** {today_pred:.2f} TL")
        st.write(f"**YarÄ±n (kapanÄ±ÅŸ) â†’** {tomorrow_pred:.2f} TL")

        with st.expander("Denklem AyrÄ±ntÄ±larÄ±"):
            st.markdown(f"""
- **Volatilite DÃ¶nÃ¼ÅŸÃ¼m Denklemi (VDD)**  
  `vdd_adj = Î”Fiyat Ã— log(1 + Volatilite%)`

- **UyarlamalÄ± GÃ¼ven KatsayÄ±sÄ± (UGK)**  
  `ugk_adj = MAE Ã— (Volatilite% / 100) Ã— GÃ¼venKatsayÄ±sÄ±`  
  <sub>GÃ¼venKatsayÄ±sÄ± = {ugk_conf}</sub>

- **Volatilite%**: Son 5 gÃ¼nlÃ¼k getirilerin st. sapmasÄ± Ã— 100  
- **Î”Fiyat**: Son 2 kapanÄ±ÅŸ fiyatÄ± farkÄ±  
- **Devre SÄ±nÄ±rÄ±**: Â±%10 (BIST)
""")
