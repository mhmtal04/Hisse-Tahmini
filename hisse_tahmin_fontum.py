import yfinance as yf
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error
import streamlit as st
import datetime

# Sayfa ayarlarÄ±
st.set_page_config(page_title="Hisse Tahmin UygulamasÄ±", layout="centered")
st.title("ğŸ“ˆ YarÄ±nki Fiyat ve YÃ¼zde Tahmini (OlasÄ±lÄ±klar Denklemi ile)")

# KullanÄ±cÄ±dan hisse kodu al
symbol_input = st.text_input("Hisse kodunu girin (Ã¶rnek: THYAO)", "")
if symbol_input:
    symbol = symbol_input.upper()
    if not symbol.endswith(".IS"):
        symbol += ".IS"

    # Tarih aralÄ±ÄŸÄ±
    col1, col2 = st.columns(2)
    with col1:
        start_date = st.date_input("BaÅŸlangÄ±Ã§ tarihi", datetime.date.today() - datetime.timedelta(days=180))
    with col2:
        end_date = st.date_input("BitiÅŸ tarihi", datetime.date.today())

    # Veri Ã§ek
    st.write(f"**{symbol}** verisi indiriliyor...")
    data = yf.download(symbol, start=start_date, end=end_date)

    if data.empty or len(data) < 20:
        st.warning("Veri alÄ±namadÄ± veya yetersiz. Daha geÃ§erli bir hisse kodu ya da tarih aralÄ±ÄŸÄ± seÃ§in.")
    else:
        # Grafik
        st.line_chart(data["Close"].dropna(), use_container_width=True)

        # GerÃ§ek zamanlÄ± fiyat
        ticker = yf.Ticker(symbol)
        try:
            current_price = float(ticker.info.get("currentPrice", data["Close"].iloc[-1]))
        except:
            current_price = data["Close"].iloc[-1]
        st.info(f"GerÃ§ek ZamanlÄ± Fiyat: {current_price:.2f} TL")

        # Teknik gÃ¶stergeler
        data["MA5"] = data["Close"].rolling(window=5).mean()
        data["MA10"] = data["Close"].rolling(window=10).mean()
        data["Target"] = data["Close"].shift(-1)
        data = data.dropna()

        # Model eÄŸitimi
        features = ["Close", "MA5", "MA10"]
        X = data[features]
        y = data["Target"]
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)

        model = RandomForestRegressor()
        model.fit(X_train, y_train)
        preds = model.predict(X_test)
        mae = mean_absolute_error(y_test, preds)
        st.success(f"Model Ortalama Hata: Â±{mae:.2f} TL")

        # Son verilerle tahmin
        latest_data = X.tail(1)
        prediction_raw = model.predict(latest_data)[0]

        # OlasÄ±lÄ±klar denklemi (volatilite etkisi)
        try:
            recent_diff = data["Close"].iloc[-1] - data["Close"].iloc[-2]
            volatility = data["Close"].pct_change().rolling(window=5).std().iloc[-1] * 100
            volatility_value = float(volatility)
            olasilik_katsayisi = min(max(volatility_value / 5, -1), 1)
        except Exception:
            olasilik_katsayisi = 0
            recent_diff = 0

        prediction_adjusted = prediction_raw + recent_diff * olasilik_katsayisi

        # %10 fiyat limiti uygulamasÄ±
        upper_limit = current_price * 1.10
        lower_limit = current_price * 0.90
        predicted_price = max(min(prediction_adjusted, upper_limit), lower_limit)

        percent_change = ((predicted_price - current_price) / current_price) * 100
        percent_change = max(min(percent_change, 10), -10)

        # SonuÃ§larÄ± gÃ¶ster
        st.subheader("Tahmin Sonucu (OlasÄ±lÄ±klar Denklemi ile):")
        st.write(f"YarÄ±nki tahmini kapanÄ±ÅŸ fiyatÄ±: **{predicted_price:.2f} TL**")
        if abs(percent_change) >= 9.9:
            st.warning("Tahmin %10 BIST sÄ±nÄ±rÄ±na ulaÅŸtÄ±.")
        st.write(f"Beklenen deÄŸiÅŸim: **{percent_change:+.2f}%**")

        with st.expander("OlasÄ±lÄ±klar Denklemi Nedir?"):
            st.markdown("""
            Bu tahmin modeli, sadece makine Ã¶ÄŸrenmesi deÄŸil,
            aynÄ± zamanda geÃ§miÅŸ fiyat deÄŸiÅŸimleri ve volatiliteye gÃ¶re
            olasÄ±lÄ±k bazlÄ± bir dÃ¼zeltme uygular. Yani modelin tahmini,
            son hareketin yÃ¶nÃ¼ne ve piyasanÄ±n oynaklÄ±ÄŸÄ±na gÃ¶re
            dinamik olarak ayarlanÄ±r.
            """)
